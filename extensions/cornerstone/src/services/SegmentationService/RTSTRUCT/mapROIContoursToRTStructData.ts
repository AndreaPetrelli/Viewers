import { utilities } from '@cornerstonejs/core';
import { CONSTANTS, metaData } from '@cornerstonejs/core';
import { vec3 } from 'gl-matrix';
/**
 * Maps a DICOM RT Struct ROI Contour to a RTStruct data that can be used
 * in Segmentation Service
 *
 * @param structureSet - A DICOM RT Struct ROI Contour
 * @param rtDisplaySetUID - A CornerstoneTools DisplaySet UID
 * @returns An array of object that includes data, id, segmentIndex, color
 * and geometry Id
 */
export function mapROIContoursToAnnotations(
  structureSet: unknown,
  rtDisplaySet,
  segmentationId: unknown,
  FrameOfReferenceUID: unknown
) {
  return structureSet.ROIContours.map(({ contourPoints, ROINumber, ROIName, colorArray }) => {
    const data = contourPoints.map(({ points, ...rest }) => {
      const newPoints = points.map(({ x, y, z }) => {
        return [x, y, z];
      });

      return {
        ...rest,
        points: newPoints,
      };
    });

    const annotations = data.map((data, index) => {
      const contourSegmentationAnnotation = {
        annotationUID: utilities.uuidv4(),
        data: {
          contour: {
            closed: true,
            polyline: data.points,
          },
          segmentation: {
            segmentationId,
            segmentIndex: ROINumber,
            color: colorArray,
            id: ROIName,
          },
          handles: {},
        },
        handles: {},
        highlighted: false,
        autoGenerated: false,
        invalidated: false,
        isLocked: false,
        isVisible: true,
        metadata: {
          toolName: 'PlanarFreehandContourSegmentationTool',
          FrameOfReferenceUID,
          referencedImageId: data.imageId,
          viewPlaneNormal: getViewPlaneNormal(data.imageId),
        },
      };
      return contourSegmentationAnnotation;
    });

    return annotations;
  }).flat();
}

function getViewPlaneNormal(imageId) {
  const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);
  const rowCosineVec = vec3.fromValues(
    imageOrientationPatient[0],
    imageOrientationPatient[1],
    imageOrientationPatient[2]
  );

  const colCosineVec = vec3.fromValues(
    imageOrientationPatient[3],
    imageOrientationPatient[4],
    imageOrientationPatient[5]
  );

  const viewPlaneNormal = vec3.create();
  vec3.cross(viewPlaneNormal, rowCosineVec, colCosineVec);

  return viewPlaneNormal;
}
