worker_processes 2;
error_log /var/logs/nginx/mydomain.error.log;
pid /var/run/nginx.pid;
include /usr/share/nginx/modules/*.conf; # See /usr/share/doc/nginx/README.dynamic.

events {
  worker_connections 1024; ## Default: 1024
  use epoll; # http://nginx.org/en/docs/events.html
  multi_accept on; # http://nginx.org/en/docs/ngx_core_module.html#multi_accept
}

# Core Modules Docs:
# http://nginx.org/en/docs/http/ngx_http_core_module.html
http {
  include '/etc/nginx/mime.types';
  default_type application/octet-stream;

  keepalive_timeout 65;
  keepalive_requests 100000;
  tcp_nopush on;
  tcp_nodelay on;



  # Nginx `listener` block
  server {
    listen [::]:80 default_server;
    listen 80;

    gzip on;
    gzip_types text/css application/javascript application/json image/svg+xml;
    gzip_comp_level 9;
    etag on;


    # Reverse Proxy for `orthanc` APIs (including DICOMWeb)
    #
    # location /pacs/ {

    #   proxy_http_version 1.1;

    #   proxy_set_header Host $host;
    #   proxy_set_header X-Real-IP $remote_addr;
    #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #   proxy_set_header X-Forwarded-Proto $scheme;

    #   expires 0;
    #   add_header Cache-Control private;

    #   # Add CORS headers
    #   # Note: uncomment the following line to allow all domains to access the Orthanc APIs
    #   # You should actually only allow the domains you trust to access the APIs
    #   add_header 'Access-Control-Allow-Origin' '*' always;
    #   add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    #   add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept' always;

    #   if ($request_method = OPTIONS) {
    #     add_header 'Access-Control-Allow-Origin' '*';
    #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    #     add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
    #     add_header 'Access-Control-Max-Age' 1728000;
    #     add_header 'Content-Type' 'text/plain; charset=utf-8';
    #     add_header 'Content-Length' 0;
    #     return 204;
    #   }

    #   proxy_pass http://orthanc:8042/;

    #   # By default, this endpoint is protected by CORS (cross-origin-resource-sharing)
    #   # You can add headers to allow other domains to request this resource.
    #   # See the "Updating CORS Settings" example below
    # }

    # location /auth/ {
    #   proxy_set_header   Upgrade $http_upgrade;
    #   proxy_set_header   Connection keep-alive;
    #   proxy_set_header   Host $host;
    #   proxy_set_header   Accept-Encoding *;
    #   proxy_cache_bypass $http_upgrade;
    #   proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    #   proxy_set_header   X-Forwarded-Proto $scheme;
    #   proxy_set_header X-Real-IP $remote_addr;
    #   proxy_buffer_size   256k;
    #   proxy_buffers   4 512k;
    #   proxy_busy_buffers_size   512k;
    #   proxy_hide_header       X-Content-Type-Options;

    #   proxy_pass http://keycloak:8080/;
    # }


    location = /oauth2/sign_out {
        expires -1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Auth-Request-Redirect /oauth2/sign_in;
        proxy_pass http://oauth2-proxy:4180;
    }


    # Do not cache sw.js, required for offline-first updates.
    location /sw.js {
      add_header Cache-Control "no-cache";
      proxy_cache_bypass $http_pragma;
      proxy_cache_revalidate on;
      expires off;
      access_log off;
    }


    location /oauth2 {
    expires -1;
    proxy_set_header Host       $host;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_pass http://oauth2-proxy:4180;
}

location / {
    root /var/www/html;
    expires -1;

    error_page 401 = /oauth2/sign_in?rd=$scheme://$host$request_uri;
    auth_request /oauth2/auth;

    auth_request_set $user  $upstream_http_x_auth_request_user;
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    auth_request_set $auth_cookie $upstream_http_set_cookie;

    proxy_set_header X-User  $user;
    proxy_set_header X-Access-Token $token;
    add_header Set-Cookie $auth_cookie;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-Proto $scheme;

    index index.html;
    try_files $uri $uri/ /index.html;
    add_header Cache-Control "no-store, no-cache, must-revalidate";
    add_header 'Cross-Origin-Opener-Policy' 'same-origin' always;
    add_header 'Cross-Origin-Embedder-Policy' 'require-corp' always;
}


  }
}
